import{S as x,i as M,s as S,w,f as T,m as k,j as $,k as v,q as I,n as F,o as L,P as b,e as c,g as h,a as y,b as l,d as o}from"./vendor-e167c7c5.js";import{B as H}from"./blog-layout-233a6880.js";function C(f){let s,i,p,r,t,a,u,_,m,g,d;return{c(){s=c("p"),s.innerHTML='Inspired by <a href="http://johnsundell.github.io" rel="nofollow">John Sundell</a> I figured now would be as good a time as any to write something here.',i=h(),p=c("p"),p.innerHTML=`Let\u2019s kick it off with a nice Swift feature I saw on <a href="https://twitter.com/dwineman/status/601853359839006721" rel="nofollow">Twitter</a> the other day where default arguments to functions are actual expressions, rather than constants.
For example:`,r=h(),t=c("div"),t.innerHTML='<div class="highlight"><pre class="highlight"><code><span class="hljs-keyword">func</span> <span class="hljs-title function_">someFunc</span>(<span class="hljs-params">a</span>: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span> <span class="hljs-operator">+</span> <span class="hljs-number">12</span>) -&gt; <span class="hljs-type">Int</span></code></pre></div>',a=h(),u=c("p"),u.textContent="While this example doesn\u2019t make a lot of sense, a better use case would be together with some of Apples shared instance APIs.",_=h(),m=c("div"),m.innerHTML='<div class="highlight"><pre class="highlight"><code><span class="hljs-keyword">func</span> <span class="hljs-title function_">anotherFunc</span>(<span class="hljs-params">fileManager</span>: <span class="hljs-type">NSFileManager</span> <span class="hljs-operator">=</span> <span class="hljs-type">NSFileManager</span>.defaultManager())</code></pre></div>',g=h(),d=c("p"),d.textContent="This provides the convinience of not having to pass the file manager around everywhere but still makes the code more testable as you can pass in a test object from a test.",y(t,"class","highlighter-rouge language-swift"),y(m,"class","highlighter-rouge language-swift")},m(e,n){l(e,s,n),l(e,i,n),l(e,p,n),l(e,r,n),l(e,t,n),l(e,a,n),l(e,u,n),l(e,_,n),l(e,m,n),l(e,g,n),l(e,d,n)},d(e){e&&o(s),e&&o(i),e&&o(p),e&&o(r),e&&o(t),e&&o(a),e&&o(u),e&&o(_),e&&o(m),e&&o(g),e&&o(d)}}}function D(f){let s,i;const p=[f[0],j];let r={$$slots:{default:[C]},$$scope:{ctx:f}};for(let t=0;t<p.length;t+=1)r=w(r,p[t]);return s=new H({props:r}),{c(){T(s.$$.fragment)},m(t,a){k(s,t,a),i=!0},p(t,[a]){const u=a&1?$(p,[a&1&&v(t[0]),a&0&&v(j)]):{};a&2&&(u.$$scope={dirty:a,ctx:t}),s.$set(u)},i(t){i||(I(s.$$.fragment,t),i=!0)},o(t){F(s.$$.fragment,t),i=!1},d(t){L(s,t)}}}const j={comments:null,date:"2015-05-24T00:00:00Z",section:"blog",tags:["swift"],title:"Default arguments in Swift"};function q(f,s,i){return f.$$set=p=>{i(0,s=w(w({},s),b(p)))},s=b(s),[s]}class A extends x{constructor(s){super();M(this,s,q,D,S,{})}}var P=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:A,metadata:j});export{A as D,P as _,j as m};
