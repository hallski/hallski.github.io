import{S as j,i as w,s as b,w as _,f as v,m as S,j as y,k as h,q as N,n as O,o as x,P as g,e as d,g as m,a as k,b as c,d as u}from"./vendor-e167c7c5.js";import{B as T}from"./blog-layout-233a6880.js";function C(p){let e,n,l,i,t,a,o;return{c(){e=d("p"),e.textContent="As I just started out with Cocoa and started looking into the NSTreeController and NSOutlineView I realized that the objects seen by the outline view isn\u2019t the same as the ones you see when working with the tree controller.",n=m(),l=d("p"),l.innerHTML="The NSTreeController wraps your objects into another object and it took me some digging before I realized that you need to call <code>representedObject</code> to fetch the <em>real</em> object.",i=m(),t=d("p"),t.textContent="Example from implementing an NSOutlineView delegate:",a=m(),o=d("div"),o.innerHTML=`<div class="highlight"><pre class="highlight"><code><span class="hljs-comment">/* NSOutlineView Delegate Method */</span>
- (<span class="hljs-built_in">BOOL</span>)outlineView:(<span class="hljs-built_in">NSOutlineView</span> *)view
        isGroupItem:(<span class="hljs-keyword">id</span>)item
{
    <span class="hljs-keyword">if</span> ([item representedObject] == section) {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;
    }

    <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>;
}</code></pre></div>`,k(o,"class","highlighter-rouge language-objc")},m(s,r){c(s,e,r),c(s,n,r),c(s,l,r),c(s,i,r),c(s,t,r),c(s,a,r),c(s,o,r)},d(s){s&&u(e),s&&u(n),s&&u(l),s&&u(i),s&&u(t),s&&u(a),s&&u(o)}}}function $(p){let e,n;const l=[p[0],f];let i={$$slots:{default:[C]},$$scope:{ctx:p}};for(let t=0;t<l.length;t+=1)i=_(i,l[t]);return e=new T({props:i}),{c(){v(e.$$.fragment)},m(t,a){S(e,t,a),n=!0},p(t,[a]){const o=a&1?y(l,[a&1&&h(t[0]),a&0&&h(f)]):{};a&2&&(o.$$scope={dirty:a,ctx:t}),e.$set(o)},i(t){n||(N(e.$$.fragment,t),n=!0)},o(t){O(e.$$.fragment,t),n=!1},d(t){x(e,t)}}}const f={comments:!1,date:"2009-04-04T00:00:00Z",section:"blog",tags:["objective-c"],title:"Retrieving the real object when using NSOutlineView with an NSTreeController"};function V(p,e,n){return p.$$set=l=>{n(0,e=_(_({},e),g(l)))},e=g(e),[e]}class I extends j{constructor(e){super();w(this,e,V,$,b,{})}}var B=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:I,metadata:f});export{I as N,B as _,f as m};
