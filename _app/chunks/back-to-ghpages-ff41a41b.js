import{S as j,i as v,s as w,y as g,r as $,u as x,v as M,w as y,m as T,k as q,x as I,I as b,e as m,g as f,a as k,c as i,n as H,f as r}from"./index-a9b4120b.js";import{B as P}from"./blog-layout-6dd02b2d.js";function B(c){let e,l,n,p,s,t,u,h,d;return{c(){e=m("p"),e.innerHTML='The only thing I was using GCP for was hosting this blog which is statically generated by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a>. As that work flow is a lot easier on Github Pages I decided to move it back there and at the same time make some improvements to my workflow.',l=f(),n=m("p"),n.innerHTML="There is a similar story with Ruby which I only use for running Jekyll. To make life a bit simpler and to avoid having to relearn how to get things to run everytime I want to update I decided to look into running it in Docker instead. Unfortunately the <code>jekyll/jekyll</code> Docker images didn\u2019t seem to enjoy running on an M1 Mac yet so I used the <code>ruby:2.7.2</code> image instead.",p=f(),s=m("div"),s.innerHTML=`<div class="highlight"><pre class="highlight"><code><span class="hljs-comment"># Use Ruby image instead of jekyll/jekyll for arm-64 support</span>
<span class="hljs-keyword">FROM</span> ruby:<span class="hljs-number">2.7</span>.<span class="hljs-number">2</span>

<span class="hljs-keyword">RUN</span><span class="language-bash"> gem install bundler:1.17.2 jekyll:4.0 jekyll-redirect-from</span>

<span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">4000</span>

<span class="hljs-keyword">CMD</span><span class="language-bash"> bundle <span class="hljs-built_in">exec</span> jekyll serve -H 0.0.0.0</span></code></pre></div>`,t=f(),u=m("p"),u.textContent="And to preview the site, I run it with:",h=f(),d=m("div"),d.innerHTML=`<div class="highlight"><pre class="highlight"><code>docker container run --<span class="hljs-built_in">rm</span> -p 4000:4000 -p 35729:35729 -it                     \\
                     -v <span class="hljs-string">&quot;<span class="hljs-subst">$(pwd)</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-subst">$(pwd)</span>&quot;</span> -w <span class="hljs-string">&quot;<span class="hljs-subst">$(pwd)</span>&quot;</span> $(docker build -q .)    \\
                     jekyll serve -H 0.0.0.0 --livereload</code></pre></div>`,k(s,"class","highlighter-rouge language-Dockerfile"),k(d,"class","highlighter-rouge language-bash")},m(a,o){i(a,e,o),i(a,l,o),i(a,n,o),i(a,p,o),i(a,s,o),i(a,t,o),i(a,u,o),i(a,h,o),i(a,d,o)},p:H,d(a){a&&r(e),a&&r(l),a&&r(n),a&&r(p),a&&r(s),a&&r(t),a&&r(u),a&&r(h),a&&r(d)}}}function G(c){let e,l;const n=[c[0],_];let p={$$slots:{default:[B]},$$scope:{ctx:c}};for(let s=0;s<n.length;s+=1)p=g(p,n[s]);return e=new P({props:p}),{c(){$(e.$$.fragment)},m(s,t){x(e,s,t),l=!0},p(s,[t]){const u=t&1?M(n,[t&1&&y(s[0]),t&0&&y(_)]):{};t&2&&(u.$$scope={dirty:t,ctx:s}),e.$set(u)},i(s){l||(T(e.$$.fragment,s),l=!0)},o(s){q(e.$$.fragment,s),l=!1},d(s){I(e,s)}}}const _={date:"2021-02-21T00:00:00.000Z",section:"blog",title:"Back to GH Pages",excerpt:"Moved my blog back to Github Pages after a few years of running it from Google Platform."};function S(c,e,l){return c.$$set=n=>{l(0,e=g(g({},e),b(n)))},e=b(e),[e]}class C extends j{constructor(e){super(),v(this,e,S,G,w,{})}}var O=Object.freeze(Object.defineProperty({__proto__:null,default:C,metadata:_},Symbol.toStringTag,{value:"Module"}));export{C as B,O as _,_ as m};
