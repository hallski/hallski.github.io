import{S as T,i as y,s as S,w as g,f as L,m as x,j as B,k as j,q as O,n as $,o as q,P as k,e as f,g as _,a as w,b as o,d as n}from"./vendor-e167c7c5.js";import{B as F}from"./blog-layout-233a6880.js";function M(u){let s,i,c,r,t,l,p,m,d,b,h;return{c(){s=f("p"),s.innerHTML='This is a short blog entry to describe how you can use blocks to seperate a generic code from problem specific using blocks. Those that have been looking at <a href="http://projecteuler.net" rel="nofollow">Project Euler</a> might recognize this problem description.',i=_(),c=f("p"),c.innerHTML='The program is supposed to calculate the sum of all even-valued <a href="http://en.wikipedia.org/wiki/Fibonacci_number" rel="nofollow">Fibonacci numbers</a> that doesn\u2019t exceed a <tt>STOP_VALUE</tt>.',r=_(),t=f("p"),t.textContent="To keep the Fibonacci calculations generic I wanted to separate the problem specific logic from the code calculating the Fibonacci sequence. Blocks can be really helpful for that which is shown below.",l=_(),p=f("div"),p.innerHTML='<div class="highlight"><pre class="highlight"><code>+ sequenceWithBlock:^ <span class="hljs-keyword">void</span> (<span class="hljs-built_in">NSInteger</span> value, <span class="hljs-built_in">BOOL</span> *stop);</code></pre></div>',m=_(),d=f("p"),d.innerHTML="This method accepts a block that is called for every Fibonacci number in the sequence until the blocks sets the <tt>stop</tt> flag. The problem specific code is then placed inside the block.",b=_(),h=f("div"),h.innerHTML=`<div class="highlight"><pre class="highlight"><code>__block <span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;

[Fibonacci sequenceWithBlock:^ <span class="hljs-keyword">void</span> (<span class="hljs-built_in">NSInteger</span> value, <span class="hljs-built_in">BOOL</span> *stop) {
    <span class="hljs-keyword">if</span> (value &gt; STOP_VALUE) {
        *stop = <span class="hljs-literal">YES</span>;
    }

    <span class="hljs-keyword">if</span> (value % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) {
        total += value;
    }
}];</code></pre></div>`,w(p,"class","highlighter-rouge language-objc"),w(h,"class","highlighter-rouge language-objc")},m(e,a){o(e,s,a),o(e,i,a),o(e,c,a),o(e,r,a),o(e,t,a),o(e,l,a),o(e,p,a),o(e,m,a),o(e,d,a),o(e,b,a),o(e,h,a)},d(e){e&&n(s),e&&n(i),e&&n(c),e&&n(r),e&&n(t),e&&n(l),e&&n(p),e&&n(m),e&&n(d),e&&n(b),e&&n(h)}}}function C(u){let s,i;const c=[u[0],v];let r={$$slots:{default:[M]},$$scope:{ctx:u}};for(let t=0;t<c.length;t+=1)r=g(r,c[t]);return s=new F({props:r}),{c(){L(s.$$.fragment)},m(t,l){x(s,t,l),i=!0},p(t,[l]){const p=l&1?B(c,[l&1&&j(t[0]),l&0&&j(v)]):{};l&2&&(p.$$scope={dirty:l,ctx:t}),s.$set(p)},i(t){i||(O(s.$$.fragment,t),i=!0)},o(t){$(s.$$.fragment,t),i=!1},d(t){q(s,t)}}}const v={comments:null,date:"2011-01-24T00:00:00Z",section:"blog",tags:["objective-c"],title:"Code Separation Using Blocks"};function H(u,s,i){return u.$$set=c=>{i(0,s=g(g({},s),k(c)))},s=k(s),[s]}class E extends T{constructor(s){super();y(this,s,H,C,S,{})}}var U=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:E,metadata:v});export{E as C,U as _,v as m};
