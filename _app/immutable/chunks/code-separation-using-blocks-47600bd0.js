import{S as it,i as pt,s as ht,k as o,q as t,a as R,l as c,m as n,r as s,h as l,c as Y,n as i,b as f,D as e,B as xe}from"./index-57d6417f.js";function ut(rt){let d,Q,m,X,$,Z,v,ee,E,te,se,W,le,ae,G,S,oe,H,g,P,T,u,ce,j,ne,re,A,ie,pe,y,he,ue,J,b,fe,z,de,ve,K,k,N,w,r,be,O,_e,me,B,Ee,ge,F,ke,Se,q,Pe,Te,I,je,Ae,L,ye,Ne,V,we,Oe,x,Be,Fe,D,qe,Ie,C,Le,Ve;return{c(){d=o("p"),Q=t("This is a short blog entry to describe how you can use blocks to seperate a generic code from problem specific using blocks. Those that have been looking at "),m=o("a"),X=t("Project Euler"),$=t(" might recognize this problem description."),Z=R(),v=o("p"),ee=t("The program is supposed to calculate the sum of all even-valued "),E=o("a"),te=t("Fibonacci numbers"),se=t(" that doesn’t exceed a "),W=o("tt"),le=t("STOP_VALUE"),ae=t("."),G=R(),S=o("p"),oe=t("To keep the Fibonacci calculations generic I wanted to separate the problem specific logic from the code calculating the Fibonacci sequence. Blocks can be really helpful for that which is shown below."),H=R(),g=o("div"),P=o("div"),T=o("pre"),u=o("code"),ce=t("+ sequenceWithBlock:^ "),j=o("span"),ne=t("void"),re=t(" ("),A=o("span"),ie=t("NSInteger"),pe=t(" value, "),y=o("span"),he=t("BOOL"),ue=t(" *stop);"),J=R(),b=o("p"),fe=t("This method accepts a block that is called for every Fibonacci number in the sequence until the blocks sets the "),z=o("tt"),de=t("stop"),ve=t(" flag. The problem specific code is then placed inside the block."),K=R(),k=o("div"),N=o("div"),w=o("pre"),r=o("code"),be=t("__block "),O=o("span"),_e=t("int"),me=t(" total = "),B=o("span"),Ee=t("0"),ge=t(`;

[Fibonacci sequenceWithBlock:^ `),F=o("span"),ke=t("void"),Se=t(" ("),q=o("span"),Pe=t("NSInteger"),Te=t(" value, "),I=o("span"),je=t("BOOL"),Ae=t(` *stop) {
    `),L=o("span"),ye=t("if"),Ne=t(` (value > STOP_VALUE) {
        *stop = `),V=o("span"),we=t("YES"),Oe=t(`;
    }

    `),x=o("span"),Be=t("if"),Fe=t(" (value % "),D=o("span"),qe=t("2"),Ie=t(" == "),C=o("span"),Le=t("0"),Ve=t(`) {
        total += value;
    }
}];`),this.h()},l(a){d=c(a,"P",{});var h=n(d);Q=s(h,"This is a short blog entry to describe how you can use blocks to seperate a generic code from problem specific using blocks. Those that have been looking at "),m=c(h,"A",{href:!0,rel:!0});var De=n(m);X=s(De,"Project Euler"),De.forEach(l),$=s(h," might recognize this problem description."),h.forEach(l),Z=Y(a),v=c(a,"P",{});var U=n(v);ee=s(U,"The program is supposed to calculate the sum of all even-valued "),E=c(U,"A",{href:!0,rel:!0});var Ce=n(E);te=s(Ce,"Fibonacci numbers"),Ce.forEach(l),se=s(U," that doesn’t exceed a "),W=c(U,"TT",{});var Ue=n(W);le=s(Ue,"STOP_VALUE"),Ue.forEach(l),ae=s(U,"."),U.forEach(l),G=Y(a),S=c(a,"P",{});var We=n(S);oe=s(We,"To keep the Fibonacci calculations generic I wanted to separate the problem specific logic from the code calculating the Fibonacci sequence. Blocks can be really helpful for that which is shown below."),We.forEach(l),H=Y(a),g=c(a,"DIV",{class:!0});var ze=n(g);P=c(ze,"DIV",{class:!0});var Re=n(P);T=c(Re,"PRE",{class:!0});var Ye=n(T);u=c(Ye,"CODE",{});var _=n(u);ce=s(_,"+ sequenceWithBlock:^ "),j=c(_,"SPAN",{class:!0});var Ze=n(j);ne=s(Ze,"void"),Ze.forEach(l),re=s(_," ("),A=c(_,"SPAN",{class:!0});var Ge=n(A);ie=s(Ge,"NSInteger"),Ge.forEach(l),pe=s(_," value, "),y=c(_,"SPAN",{class:!0});var He=n(y);he=s(He,"BOOL"),He.forEach(l),ue=s(_," *stop);"),_.forEach(l),Ye.forEach(l),Re.forEach(l),ze.forEach(l),J=Y(a),b=c(a,"P",{});var M=n(b);fe=s(M,"This method accepts a block that is called for every Fibonacci number in the sequence until the blocks sets the "),z=c(M,"TT",{});var Je=n(z);de=s(Je,"stop"),Je.forEach(l),ve=s(M," flag. The problem specific code is then placed inside the block."),M.forEach(l),K=Y(a),k=c(a,"DIV",{class:!0});var Ke=n(k);N=c(Ke,"DIV",{class:!0});var Me=n(N);w=c(Me,"PRE",{class:!0});var Qe=n(w);r=c(Qe,"CODE",{});var p=n(r);be=s(p,"__block "),O=c(p,"SPAN",{class:!0});var Xe=n(O);_e=s(Xe,"int"),Xe.forEach(l),me=s(p," total = "),B=c(p,"SPAN",{class:!0});var $e=n(B);Ee=s($e,"0"),$e.forEach(l),ge=s(p,`;

[Fibonacci sequenceWithBlock:^ `),F=c(p,"SPAN",{class:!0});var et=n(F);ke=s(et,"void"),et.forEach(l),Se=s(p," ("),q=c(p,"SPAN",{class:!0});var tt=n(q);Pe=s(tt,"NSInteger"),tt.forEach(l),Te=s(p," value, "),I=c(p,"SPAN",{class:!0});var st=n(I);je=s(st,"BOOL"),st.forEach(l),Ae=s(p,` *stop) {
    `),L=c(p,"SPAN",{class:!0});var lt=n(L);ye=s(lt,"if"),lt.forEach(l),Ne=s(p,` (value > STOP_VALUE) {
        *stop = `),V=c(p,"SPAN",{class:!0});var at=n(V);we=s(at,"YES"),at.forEach(l),Oe=s(p,`;
    }

    `),x=c(p,"SPAN",{class:!0});var ot=n(x);Be=s(ot,"if"),ot.forEach(l),Fe=s(p," (value % "),D=c(p,"SPAN",{class:!0});var ct=n(D);qe=s(ct,"2"),ct.forEach(l),Ie=s(p," == "),C=c(p,"SPAN",{class:!0});var nt=n(C);Le=s(nt,"0"),nt.forEach(l),Ve=s(p,`) {
        total += value;
    }
}];`),p.forEach(l),Qe.forEach(l),Me.forEach(l),Ke.forEach(l),this.h()},h(){i(m,"href","http://projecteuler.net"),i(m,"rel","nofollow"),i(E,"href","http://en.wikipedia.org/wiki/Fibonacci_number"),i(E,"rel","nofollow"),i(j,"class","hljs-type"),i(A,"class","hljs-built_in"),i(y,"class","hljs-type"),i(T,"class","highlight"),i(P,"class","highlight"),i(g,"class","highlighter-rouge language-objc"),i(O,"class","hljs-type"),i(B,"class","hljs-number"),i(F,"class","hljs-type"),i(q,"class","hljs-built_in"),i(I,"class","hljs-type"),i(L,"class","hljs-keyword"),i(V,"class","hljs-literal"),i(x,"class","hljs-keyword"),i(D,"class","hljs-number"),i(C,"class","hljs-number"),i(w,"class","highlight"),i(N,"class","highlight"),i(k,"class","highlighter-rouge language-objc")},m(a,h){f(a,d,h),e(d,Q),e(d,m),e(m,X),e(d,$),f(a,Z,h),f(a,v,h),e(v,ee),e(v,E),e(E,te),e(v,se),e(v,W),e(W,le),e(v,ae),f(a,G,h),f(a,S,h),e(S,oe),f(a,H,h),f(a,g,h),e(g,P),e(P,T),e(T,u),e(u,ce),e(u,j),e(j,ne),e(u,re),e(u,A),e(A,ie),e(u,pe),e(u,y),e(y,he),e(u,ue),f(a,J,h),f(a,b,h),e(b,fe),e(b,z),e(z,de),e(b,ve),f(a,K,h),f(a,k,h),e(k,N),e(N,w),e(w,r),e(r,be),e(r,O),e(O,_e),e(r,me),e(r,B),e(B,Ee),e(r,ge),e(r,F),e(F,ke),e(r,Se),e(r,q),e(q,Pe),e(r,Te),e(r,I),e(I,je),e(r,Ae),e(r,L),e(L,ye),e(r,Ne),e(r,V),e(V,we),e(r,Oe),e(r,x),e(x,Be),e(r,Fe),e(r,D),e(D,qe),e(r,Ie),e(r,C),e(C,Le),e(r,Ve)},p:xe,i:xe,o:xe,d(a){a&&l(d),a&&l(Z),a&&l(v),a&&l(G),a&&l(S),a&&l(H),a&&l(g),a&&l(J),a&&l(b),a&&l(K),a&&l(k)}}}const dt={comments:null,date:"2011-01-24T00:00:00Z",section:"blog",tags:["objective-c"],title:"Code Separation Using Blocks"};class vt extends it{constructor(d){super(),pt(this,d,null,ut,ht,{})}}export{vt as default,dt as metadata};
