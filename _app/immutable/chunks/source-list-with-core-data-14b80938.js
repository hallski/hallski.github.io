import{S as Ti,i as xi,s as Ri,k as l,q as t,a as f,l as n,m as r,r as s,h as a,c as u,F as Di,n as i,b as p,D as e,B as Nn}from"./index-57d6417f.js";function Fi(Mi){let R,As,es,z,X,bn,ts,Z,Cs,ss,J,ks,as,F,gs,U,Os,Ds,os,Q,Ms,ls,Y,Ts,ns,$,xs,rs,k,Rs,yt,Fs,Ls,St,qs,Us,is,m,_t,Vs,Ws,wt,Ks,Gs,Nt,Hs,Bs,bt,zs,Xs,jt,Zs,Js,Pt,Qs,Ys,It,$s,ea,At,ta,sa,Ct,aa,oa,cs,ee,te,jn,ds,S,la,kt,na,ra,gt,ia,ca,Ot,da,ha,Dt,pa,fa,Mt,ua,ma,hs,b,Ea,Tt,va,ya,xt,Sa,_a,Rt,wa,Na,Ft,ba,ja,ps,V,se,ae,_,oe,Pa,Ia,le,Aa,Ca,ne,ka,ga,re,Oa,Da,ie,Ma,Ta,ce,xa,Ra,fs,g,Fa,Lt,La,qa,qt,Ua,Va,us,de,Wa,ms,I,Ka,Ut,Ga,Ha,Vt,Ba,za,Wt,Xa,Za,Es,W,he,pe,E,Ja,fe,Qa,Ya,ue,$a,eo,me,to,so,Ee,ao,oo,ve,lo,no,ye,ro,io,Se,co,ho,vs,_e,po,ys,A,fo,Kt,uo,mo,Gt,Eo,vo,Ht,yo,So,Ss,K,we,Ne,c,_o,be,wo,No,je,bo,jo,Pe,Po,Io,Ie,Ao,Co,Ae,ko,go,Ce,Oo,Do,ke,Mo,To,ge,xo,Ro,Oe,Fo,Lo,De,qo,Uo,Me,Vo,Wo,Te,Ko,Go,xe,Ho,Bo,Re,zo,Xo,Fe,Zo,Jo,Le,Qo,Yo,qe,$o,el,Ue,tl,sl,Ve,al,ol,We,ll,nl,Ke,rl,il,Ge,cl,dl,He,hl,pl,Be,fl,ul,ze,ml,El,Xe,vl,yl,Ze,Sl,_l,Je,wl,Nl,Qe,bl,jl,Ye,Pl,Il,$e,Al,Cl,et,kl,gl,tt,Ol,Dl,st,Ml,Tl,_s,j,xl,Bt,Rl,Fl,zt,Ll,ql,Xt,Ul,Vl,Zt,Wl,Kl,ws,O,Gl,Jt,Hl,Bl,Qt,zl,Xl,Ns,G,at,ot,v,Zl,lt,Jl,Ql,nt,Yl,$l,rt,en,tn,it,sn,an,ct,on,ln,dt,nn,rn,ht,cn,dn,bs,D,hn,Yt,pn,fn,$t,un,mn,js,M,En,H,vn,yn,B,Sn,_n,Ps,pt,wn;return{c(){R=l("p"),As=t("Last week I decided to look into how to create a source list that is backed by Core Data with section headers created from code. New to Cocoa I set out to Google for a solution but surprisingly enough I didn’t find a lot about how to achieve this (or I simply googled for the wrong things). After a few days I managed to derive, what I believe, an elegant solution to this and figured it could be useful for others wanting to do this."),es=f(),z=l("p"),X=l("img"),ts=f(),Z=l("h2"),Cs=t("Approaches"),ss=f(),J=l("p"),ks=t("My first plan was to create some kind of layer in between Core Data and the NSTreeController but that quickly added a lot of complexity and code. The second solution was to create the headers and put them in Core Data the first time you start the application. While this was easily done it felt a bit hackish."),as=f(),F=l("p"),gs=t("After spending a couple of days with this, trying out various solutions and ideas me and "),U=l("a"),Os=t("Richard"),Ds=t(" discussed the topic, wondering if maybe Core Data had some builtin support for this."),os=f(),Q=l("p"),Ms=t("Twenty minutes and some fifty lines of code later I looked at the screen, amazed at how awesome Core Data is. This is what I ended up with, mind though that it’s not a full tutorial but only the crucial steps, you still need to know how to connect it all with the NSTreeController and NSOutlineView."),ls=f(),Y=l("h2"),Ts=t("The Solution"),ns=f(),$=l("p"),xs=t("The idea is to use two different persistent stores, the regular XML store and an in memory store for the code generated entites."),rs=f(),k=l("p"),Rs=t("For the purpose of this example the data model is very simple, two entities called "),yt=l("em"),Fs=t("Section"),Ls=t(" (for the code generated section headers) and "),St=l("em"),qs=t("Item"),Us=t(" (for the entities that are read from Core Data)."),is=f(),m=l("p"),_t=l("em"),Vs=t("Section"),Ws=t(" will have a "),wt=l("code"),Ks=t("name"),Gs=t(" attribute and a one-to-many relationship to "),Nt=l("em"),Hs=t("Item"),Bs=t(" called "),bt=l("code"),zs=t("children"),Xs=t(". "),jt=l("em"),Zs=t("Item"),Js=t(" will have a "),Pt=l("code"),Qs=t("name"),Ys=t(" and a reverse to-one relationship back to "),It=l("em"),$s=t("Section"),ea=t(" called "),At=l("code"),ta=t("section"),sa=t(". Make sure you "),Ct=l("strong"),aa=t("make this relationship transient"),oa=t(" to tell Core Data that this relationship only exists runtime and should not be stored."),cs=f(),ee=l("p"),te=l("img"),ds=f(),S=l("p"),la=t("The "),kt=l("em"),na=t("NSTreeController"),ra=t(" has a property called "),gt=l("code"),ia=t("childrenKeyPath"),ca=t(" that defines the key path to retrieve an array of children from each of the nodes in the tree. All nodes displayed in the tree need to respond to this key path. Since "),Ot=l("em"),da=t("Item"),ha=t("s don’t have children it is not included in the data model (though you could have added it in the model designer but in my opinion isn’t as nice), I will instead create a subclass of "),Dt=l("em"),pa=t("NSManagedObject"),fa=t(" to represent an "),Mt=l("em"),ua=t("Item"),ma=t("."),hs=f(),b=l("p"),Ea=t("Select the "),Tt=l("em"),va=t("Item"),ya=t(" entity in the model designer and create a new file (File->New File and choose Managed Object Class from the Cocoa section). Simply name it Item.m (and check the "),xt=l("em"),Sa=t("Also create “Item.h”"),_a=t(") box. Add a method "),Rt=l("code"),wa=t("children"),Na=t(" to your "),Ft=l("em"),ba=t("Item"),ja=t(" class."),ps=f(),V=l("div"),se=l("div"),ae=l("pre"),_=l("code"),oe=l("span"),Pa=t("/* In Item.h */"),Ia=t(`
- (`),le=l("span"),Aa=t("id"),Ca=t(`)children;

`),ne=l("span"),ka=t("/* In Item.m */"),ga=t(`
- (`),re=l("span"),Oa=t("id"),Da=t(`)children
{
    `),ie=l("span"),Ma=t("return"),Ta=t(" "),ce=l("span"),xa=t("nil"),Ra=t(`;
}`),fs=f(),g=l("p"),Fa=t("This method will be called by the NSTreeController when it is populating the tree and since an "),Lt=l("em"),La=t("Item"),qa=t(" doesn’t have any children it should return "),qt=l("code"),Ua=t("nil"),Va=t("."),us=f(),de=l("p"),Wa=t("That’s it for the model, time to setup the stores."),ms=f(),I=l("p"),Ka=t("I extended the method "),Ut=l("code"),Ga=t("persistentStoreCoordinator"),Ha=t(" in the auto generated application delegate to create a second store with the URL "),Vt=l("em"),Ba=t("memory://store"),za=t(". This store should be of the type "),Wt=l("code"),Xa=t("NSInMemoryStoreType"),Za=t(" which means that any entity tied to it won’t be saved to disk."),Es=f(),W=l("div"),he=l("div"),pe=l("pre"),E=l("code"),Ja=t("url = ["),fe=l("span"),Qa=t("NSURL"),Ya=t(" URLWithString:"),ue=l("span"),$a=t('@"memory://store"'),eo=t(`];
`),me=l("span"),to=t("if"),so=t(" (![persistentStoreCoordinator addPersistentStoreWithType:"),Ee=l("span"),ao=t("NSInMemoryStoreType"),oo=t(`
                                              configuration:`),ve=l("span"),lo=t("nil"),no=t(`
                                                        URL:url
                                                    options:`),ye=l("span"),ro=t("nil"),io=t(`
                                                      error:&error]) {
    [[`),Se=l("span"),co=t("NSApplication"),ho=t(` sharedApplication] presentError:error];
}`),vs=f(),_e=l("p"),po=t("Both of these stores act in the same context so the layers on top of Core Data won’t know the difference between entites in one store or another."),ys=f(),A=l("p"),fo=t("With the store in place the "),Kt=l("em"),uo=t("Section"),mo=t(" entities are created when the application is started, I added the code to the application delegate init method. After I create the "),Gt=l("em"),Eo=t("Section"),vo=t(" I populate it with the result of fetching all my "),Ht=l("em"),yo=t("Item"),So=t(" entities from Core Data (lines 30-33 below)."),Ss=f(),K=l("div"),we=l("div"),Ne=l("pre"),c=l("code"),_o=t("- ("),be=l("span"),wo=t("NSArray"),No=t(" *)fetchAllWithEntity:("),je=l("span"),bo=t("NSString"),jo=t(` *)entity
                          error:(`),Pe=l("span"),Po=t("NSError"),Io=t(` **)error
{
    `),Ie=l("span"),Ao=t("NSFetchRequest"),Co=t(` *request;
    `),Ae=l("span"),ko=t("NSEntityDescription"),go=t(` *desc;

    desc = [`),Ce=l("span"),Oo=t("NSEntityDescription"),Do=t(` entityForName:entity
                       inManagedObjectContext:[`),ke=l("span"),Mo=t("self"),To=t(` managedObjectContext]];

    request = [[[`),ge=l("span"),xo=t("NSFetchRequest"),Ro=t(` alloc] init] autorelease];
    [request setEntity:desc];

    `),Oe=l("span"),Fo=t("return"),Lo=t(" [["),De=l("span"),qo=t("self"),Uo=t(` managedObjectContext] executeFetchRequest:request error:error];
}

- (`),Me=l("span"),Vo=t("id"),Wo=t(`)init
{
    [`),Te=l("span"),Ko=t("super"),Go=t(` init];

    `),xe=l("span"),Ho=t("NSError"),Bo=t(` *error;
    `),Re=l("span"),zo=t("NSURL"),Xo=t(" *url = ["),Fe=l("span"),Zo=t("NSURL"),Jo=t(" URLWithString:"),Le=l("span"),Qo=t('@"memory://store"'),Yo=t(`];
    `),qe=l("span"),$o=t("id"),el=t(" memoryStore = [["),Ue=l("span"),tl=t("self"),sl=t(` persistentStoreCoordinator] persistentStoreForURL:url];

    section = [[`),Ve=l("span"),al=t("NSEntityDescription"),ol=t(" insertNewObjectForEntityForName:"),We=l("span"),ll=t('@"Section"'),nl=t(`
                                             inManagedObjectContext:[`),Ke=l("span"),rl=t("self"),il=t(" managedObjectContext]] "),Ge=l("span"),cl=t("retain"),dl=t(`];
    [section setValue:`),He=l("span"),hl=t('@"My section"'),pl=t(" forKey:"),Be=l("span"),fl=t('@"name"'),ul=t(`];
    [[`),ze=l("span"),ml=t("self"),El=t(` managedObjectContext] assignObject:section
                            toPersistentStore:memoryStore];

    `),Xe=l("span"),vl=t("NSArray"),yl=t(" *items = ["),Ze=l("span"),Sl=t("self"),_l=t(" fetchAllWithEntity:"),Je=l("span"),wl=t('@"Item"'),Nl=t(` error:&error];
    `),Qe=l("span"),bl=t("for"),jl=t(" ("),Ye=l("span"),Pl=t("id"),Il=t(" item "),$e=l("span"),Al=t("in"),Cl=t(` items) {
        [item setValue:section forKey:`),et=l("span"),kl=t('@"section"'),gl=t(`];
    }

    `),tt=l("span"),Ol=t("return"),Dl=t(" "),st=l("span"),Ml=t("self"),Tl=t(`;
}`),_s=f(),j=l("p"),xl=t("Here the message "),Bt=l("code"),Rl=t("assignObject:toPersistentStore:"),Fl=t(" is sent to the "),zt=l("code"),Ll=t("NSManagedObjectContext"),ql=t(" to put the newly created "),Xt=l("em"),Ul=t("Section"),Vl=t(" in the in memory store so that it is not saved to disk with the "),Zt=l("em"),Wl=t("Item"),Kl=t("s."),ws=f(),O=l("p"),Gl=t("I also added an action to my application delegate to create new "),Jt=l("em"),Hl=t("Item"),Bl=t("s and make them children to the "),Qt=l("em"),zl=t("Section"),Xl=t("."),Ns=f(),G=l("div"),at=l("div"),ot=l("pre"),v=l("code"),Zl=t("- ("),lt=l("span"),Jl=t("void"),Ql=t(")addItem:("),nt=l("span"),Yl=t("id"),$l=t(`)sender
{
    `),rt=l("span"),en=t("id"),tn=t(" newObject = ["),it=l("span"),sn=t("NSEntityDescription"),an=t(" insertNewObjectForEntityForName:"),ct=l("span"),on=t('@"Item"'),ln=t(`
                                                 inManagedObjectContext:[`),dt=l("span"),nn=t("self"),rn=t(` managedObjectContext]];
    [newObject setValue:section forKey:`),ht=l("span"),cn=t('@"section"'),dn=t(`];
}`),bs=f(),D=l("p"),hn=t("That’s it! Now a regular "),Yt=l("code"),pn=t("NSTreeController"),fn=t(" can be used in entity mode by setting the entity to "),$t=l("em"),un=t("Section"),mn=t(" as you would normally do."),js=f(),M=l("p"),En=t("I hope you found it useful, if you did, make sure you share it with your friends and subscribe to my "),H=l("a"),vn=t("RSS feed"),yn=t(" or "),B=l("a"),Sn=t("follow me on twitter"),_n=t(" for notifications about future posts."),Ps=f(),pt=l("p"),wn=t("I’d love to get feedback on better solutions, improvements or just comments on what you think."),this.h()},l(o){R=n(o,"P",{});var h=r(R);As=s(h,"Last week I decided to look into how to create a source list that is backed by Core Data with section headers created from code. New to Cocoa I set out to Google for a solution but surprisingly enough I didn’t find a lot about how to achieve this (or I simply googled for the wrong things). After a few days I managed to derive, what I believe, an elegant solution to this and figured it could be useful for others wanting to do this."),h.forEach(a),es=u(o),z=n(o,"P",{});var Pn=r(z);X=n(Pn,"IMG",{src:!0,alt:!0}),Pn.forEach(a),ts=u(o),Z=n(o,"H2",{});var In=r(Z);Cs=s(In,"Approaches"),In.forEach(a),ss=u(o),J=n(o,"P",{});var An=r(J);ks=s(An,"My first plan was to create some kind of layer in between Core Data and the NSTreeController but that quickly added a lot of complexity and code. The second solution was to create the headers and put them in Core Data the first time you start the application. While this was easily done it felt a bit hackish."),An.forEach(a),as=u(o),F=n(o,"P",{});var Is=r(F);gs=s(Is,"After spending a couple of days with this, trying out various solutions and ideas me and "),U=n(Is,"A",{href:!0,rel:!0});var Cn=r(U);Os=s(Cn,"Richard"),Cn.forEach(a),Ds=s(Is," discussed the topic, wondering if maybe Core Data had some builtin support for this."),Is.forEach(a),os=u(o),Q=n(o,"P",{});var kn=r(Q);Ms=s(kn,"Twenty minutes and some fifty lines of code later I looked at the screen, amazed at how awesome Core Data is. This is what I ended up with, mind though that it’s not a full tutorial but only the crucial steps, you still need to know how to connect it all with the NSTreeController and NSOutlineView."),kn.forEach(a),ls=u(o),Y=n(o,"H2",{});var gn=r(Y);Ts=s(gn,"The Solution"),gn.forEach(a),ns=u(o),$=n(o,"P",{});var On=r($);xs=s(On,"The idea is to use two different persistent stores, the regular XML store and an in memory store for the code generated entites."),On.forEach(a),rs=u(o),k=n(o,"P",{});var ft=r(k);Rs=s(ft,"For the purpose of this example the data model is very simple, two entities called "),yt=n(ft,"EM",{});var Dn=r(yt);Fs=s(Dn,"Section"),Dn.forEach(a),Ls=s(ft," (for the code generated section headers) and "),St=n(ft,"EM",{});var Mn=r(St);qs=s(Mn,"Item"),Mn.forEach(a),Us=s(ft," (for the entities that are read from Core Data)."),ft.forEach(a),is=u(o),m=n(o,"P",{});var y=r(m);_t=n(y,"EM",{});var Tn=r(_t);Vs=s(Tn,"Section"),Tn.forEach(a),Ws=s(y," will have a "),wt=n(y,"CODE",{});var xn=r(wt);Ks=s(xn,"name"),xn.forEach(a),Gs=s(y," attribute and a one-to-many relationship to "),Nt=n(y,"EM",{});var Rn=r(Nt);Hs=s(Rn,"Item"),Rn.forEach(a),Bs=s(y," called "),bt=n(y,"CODE",{});var Fn=r(bt);zs=s(Fn,"children"),Fn.forEach(a),Xs=s(y,". "),jt=n(y,"EM",{});var Ln=r(jt);Zs=s(Ln,"Item"),Ln.forEach(a),Js=s(y," will have a "),Pt=n(y,"CODE",{});var qn=r(Pt);Qs=s(qn,"name"),qn.forEach(a),Ys=s(y," and a reverse to-one relationship back to "),It=n(y,"EM",{});var Un=r(It);$s=s(Un,"Section"),Un.forEach(a),ea=s(y," called "),At=n(y,"CODE",{});var Vn=r(At);ta=s(Vn,"section"),Vn.forEach(a),sa=s(y,". Make sure you "),Ct=n(y,"STRONG",{});var Wn=r(Ct);aa=s(Wn,"make this relationship transient"),Wn.forEach(a),oa=s(y," to tell Core Data that this relationship only exists runtime and should not be stored."),y.forEach(a),cs=u(o),ee=n(o,"P",{});var Kn=r(ee);te=n(Kn,"IMG",{src:!0,alt:!0}),Kn.forEach(a),ds=u(o),S=n(o,"P",{});var C=r(S);la=s(C,"The "),kt=n(C,"EM",{});var Gn=r(kt);na=s(Gn,"NSTreeController"),Gn.forEach(a),ra=s(C," has a property called "),gt=n(C,"CODE",{});var Hn=r(gt);ia=s(Hn,"childrenKeyPath"),Hn.forEach(a),ca=s(C," that defines the key path to retrieve an array of children from each of the nodes in the tree. All nodes displayed in the tree need to respond to this key path. Since "),Ot=n(C,"EM",{});var Bn=r(Ot);da=s(Bn,"Item"),Bn.forEach(a),ha=s(C,"s don’t have children it is not included in the data model (though you could have added it in the model designer but in my opinion isn’t as nice), I will instead create a subclass of "),Dt=n(C,"EM",{});var zn=r(Dt);pa=s(zn,"NSManagedObject"),zn.forEach(a),fa=s(C," to represent an "),Mt=n(C,"EM",{});var Xn=r(Mt);ua=s(Xn,"Item"),Xn.forEach(a),ma=s(C,"."),C.forEach(a),hs=u(o),b=n(o,"P",{});var T=r(b);Ea=s(T,"Select the "),Tt=n(T,"EM",{});var Zn=r(Tt);va=s(Zn,"Item"),Zn.forEach(a),ya=s(T," entity in the model designer and create a new file (File->New File and choose Managed Object Class from the Cocoa section). Simply name it Item.m (and check the "),xt=n(T,"EM",{});var Jn=r(xt);Sa=s(Jn,"Also create “Item.h”"),Jn.forEach(a),_a=s(T,") box. Add a method "),Rt=n(T,"CODE",{});var Qn=r(Rt);wa=s(Qn,"children"),Qn.forEach(a),Na=s(T," to your "),Ft=n(T,"EM",{});var Yn=r(Ft);ba=s(Yn,"Item"),Yn.forEach(a),ja=s(T," class."),T.forEach(a),ps=u(o),V=n(o,"DIV",{class:!0});var $n=r(V);se=n($n,"DIV",{class:!0});var er=r(se);ae=n(er,"PRE",{class:!0});var tr=r(ae);_=n(tr,"CODE",{});var P=r(_);oe=n(P,"SPAN",{class:!0});var sr=r(oe);Pa=s(sr,"/* In Item.h */"),sr.forEach(a),Ia=s(P,`
- (`),le=n(P,"SPAN",{class:!0});var ar=r(le);Aa=s(ar,"id"),ar.forEach(a),Ca=s(P,`)children;

`),ne=n(P,"SPAN",{class:!0});var or=r(ne);ka=s(or,"/* In Item.m */"),or.forEach(a),ga=s(P,`
- (`),re=n(P,"SPAN",{class:!0});var lr=r(re);Oa=s(lr,"id"),lr.forEach(a),Da=s(P,`)children
{
    `),ie=n(P,"SPAN",{class:!0});var nr=r(ie);Ma=s(nr,"return"),nr.forEach(a),Ta=s(P," "),ce=n(P,"SPAN",{class:!0});var rr=r(ce);xa=s(rr,"nil"),rr.forEach(a),Ra=s(P,`;
}`),P.forEach(a),tr.forEach(a),er.forEach(a),$n.forEach(a),fs=u(o),g=n(o,"P",{});var ut=r(g);Fa=s(ut,"This method will be called by the NSTreeController when it is populating the tree and since an "),Lt=n(ut,"EM",{});var ir=r(Lt);La=s(ir,"Item"),ir.forEach(a),qa=s(ut," doesn’t have any children it should return "),qt=n(ut,"CODE",{});var cr=r(qt);Ua=s(cr,"nil"),cr.forEach(a),Va=s(ut,"."),ut.forEach(a),us=u(o),de=n(o,"P",{});var dr=r(de);Wa=s(dr,"That’s it for the model, time to setup the stores."),dr.forEach(a),ms=u(o),I=n(o,"P",{});var L=r(I);Ka=s(L,"I extended the method "),Ut=n(L,"CODE",{});var hr=r(Ut);Ga=s(hr,"persistentStoreCoordinator"),hr.forEach(a),Ha=s(L," in the auto generated application delegate to create a second store with the URL "),Vt=n(L,"EM",{});var pr=r(Vt);Ba=s(pr,"memory://store"),pr.forEach(a),za=s(L,". This store should be of the type "),Wt=n(L,"CODE",{});var fr=r(Wt);Xa=s(fr,"NSInMemoryStoreType"),fr.forEach(a),Za=s(L," which means that any entity tied to it won’t be saved to disk."),L.forEach(a),Es=u(o),W=n(o,"DIV",{class:!0});var ur=r(W);he=n(ur,"DIV",{class:!0});var mr=r(he);pe=n(mr,"PRE",{class:!0});var Er=r(pe);E=n(Er,"CODE",{});var w=r(E);Ja=s(w,"url = ["),fe=n(w,"SPAN",{class:!0});var vr=r(fe);Qa=s(vr,"NSURL"),vr.forEach(a),Ya=s(w," URLWithString:"),ue=n(w,"SPAN",{class:!0});var yr=r(ue);$a=s(yr,'@"memory://store"'),yr.forEach(a),eo=s(w,`];
`),me=n(w,"SPAN",{class:!0});var Sr=r(me);to=s(Sr,"if"),Sr.forEach(a),so=s(w," (![persistentStoreCoordinator addPersistentStoreWithType:"),Ee=n(w,"SPAN",{class:!0});var _r=r(Ee);ao=s(_r,"NSInMemoryStoreType"),_r.forEach(a),oo=s(w,`
                                              configuration:`),ve=n(w,"SPAN",{class:!0});var wr=r(ve);lo=s(wr,"nil"),wr.forEach(a),no=s(w,`
                                                        URL:url
                                                    options:`),ye=n(w,"SPAN",{class:!0});var Nr=r(ye);ro=s(Nr,"nil"),Nr.forEach(a),io=s(w,`
                                                      error:&error]) {
    [[`),Se=n(w,"SPAN",{class:!0});var br=r(Se);co=s(br,"NSApplication"),br.forEach(a),ho=s(w,` sharedApplication] presentError:error];
}`),w.forEach(a),Er.forEach(a),mr.forEach(a),ur.forEach(a),vs=u(o),_e=n(o,"P",{});var jr=r(_e);po=s(jr,"Both of these stores act in the same context so the layers on top of Core Data won’t know the difference between entites in one store or another."),jr.forEach(a),ys=u(o),A=n(o,"P",{});var q=r(A);fo=s(q,"With the store in place the "),Kt=n(q,"EM",{});var Pr=r(Kt);uo=s(Pr,"Section"),Pr.forEach(a),mo=s(q," entities are created when the application is started, I added the code to the application delegate init method. After I create the "),Gt=n(q,"EM",{});var Ir=r(Gt);Eo=s(Ir,"Section"),Ir.forEach(a),vo=s(q," I populate it with the result of fetching all my "),Ht=n(q,"EM",{});var Ar=r(Ht);yo=s(Ar,"Item"),Ar.forEach(a),So=s(q," entities from Core Data (lines 30-33 below)."),q.forEach(a),Ss=u(o),K=n(o,"DIV",{class:!0});var Cr=r(K);we=n(Cr,"DIV",{class:!0});var kr=r(we);Ne=n(kr,"PRE",{class:!0});var gr=r(Ne);c=n(gr,"CODE",{});var d=r(c);_o=s(d,"- ("),be=n(d,"SPAN",{class:!0});var Or=r(be);wo=s(Or,"NSArray"),Or.forEach(a),No=s(d," *)fetchAllWithEntity:("),je=n(d,"SPAN",{class:!0});var Dr=r(je);bo=s(Dr,"NSString"),Dr.forEach(a),jo=s(d,` *)entity
                          error:(`),Pe=n(d,"SPAN",{class:!0});var Mr=r(Pe);Po=s(Mr,"NSError"),Mr.forEach(a),Io=s(d,` **)error
{
    `),Ie=n(d,"SPAN",{class:!0});var Tr=r(Ie);Ao=s(Tr,"NSFetchRequest"),Tr.forEach(a),Co=s(d,` *request;
    `),Ae=n(d,"SPAN",{class:!0});var xr=r(Ae);ko=s(xr,"NSEntityDescription"),xr.forEach(a),go=s(d,` *desc;

    desc = [`),Ce=n(d,"SPAN",{class:!0});var Rr=r(Ce);Oo=s(Rr,"NSEntityDescription"),Rr.forEach(a),Do=s(d,` entityForName:entity
                       inManagedObjectContext:[`),ke=n(d,"SPAN",{class:!0});var Fr=r(ke);Mo=s(Fr,"self"),Fr.forEach(a),To=s(d,` managedObjectContext]];

    request = [[[`),ge=n(d,"SPAN",{class:!0});var Lr=r(ge);xo=s(Lr,"NSFetchRequest"),Lr.forEach(a),Ro=s(d,` alloc] init] autorelease];
    [request setEntity:desc];

    `),Oe=n(d,"SPAN",{class:!0});var qr=r(Oe);Fo=s(qr,"return"),qr.forEach(a),Lo=s(d," [["),De=n(d,"SPAN",{class:!0});var Ur=r(De);qo=s(Ur,"self"),Ur.forEach(a),Uo=s(d,` managedObjectContext] executeFetchRequest:request error:error];
}

- (`),Me=n(d,"SPAN",{class:!0});var Vr=r(Me);Vo=s(Vr,"id"),Vr.forEach(a),Wo=s(d,`)init
{
    [`),Te=n(d,"SPAN",{class:!0});var Wr=r(Te);Ko=s(Wr,"super"),Wr.forEach(a),Go=s(d,` init];

    `),xe=n(d,"SPAN",{class:!0});var Kr=r(xe);Ho=s(Kr,"NSError"),Kr.forEach(a),Bo=s(d,` *error;
    `),Re=n(d,"SPAN",{class:!0});var Gr=r(Re);zo=s(Gr,"NSURL"),Gr.forEach(a),Xo=s(d," *url = ["),Fe=n(d,"SPAN",{class:!0});var Hr=r(Fe);Zo=s(Hr,"NSURL"),Hr.forEach(a),Jo=s(d," URLWithString:"),Le=n(d,"SPAN",{class:!0});var Br=r(Le);Qo=s(Br,'@"memory://store"'),Br.forEach(a),Yo=s(d,`];
    `),qe=n(d,"SPAN",{class:!0});var zr=r(qe);$o=s(zr,"id"),zr.forEach(a),el=s(d," memoryStore = [["),Ue=n(d,"SPAN",{class:!0});var Xr=r(Ue);tl=s(Xr,"self"),Xr.forEach(a),sl=s(d,` persistentStoreCoordinator] persistentStoreForURL:url];

    section = [[`),Ve=n(d,"SPAN",{class:!0});var Zr=r(Ve);al=s(Zr,"NSEntityDescription"),Zr.forEach(a),ol=s(d," insertNewObjectForEntityForName:"),We=n(d,"SPAN",{class:!0});var Jr=r(We);ll=s(Jr,'@"Section"'),Jr.forEach(a),nl=s(d,`
                                             inManagedObjectContext:[`),Ke=n(d,"SPAN",{class:!0});var Qr=r(Ke);rl=s(Qr,"self"),Qr.forEach(a),il=s(d," managedObjectContext]] "),Ge=n(d,"SPAN",{class:!0});var Yr=r(Ge);cl=s(Yr,"retain"),Yr.forEach(a),dl=s(d,`];
    [section setValue:`),He=n(d,"SPAN",{class:!0});var $r=r(He);hl=s($r,'@"My section"'),$r.forEach(a),pl=s(d," forKey:"),Be=n(d,"SPAN",{class:!0});var ei=r(Be);fl=s(ei,'@"name"'),ei.forEach(a),ul=s(d,`];
    [[`),ze=n(d,"SPAN",{class:!0});var ti=r(ze);ml=s(ti,"self"),ti.forEach(a),El=s(d,` managedObjectContext] assignObject:section
                            toPersistentStore:memoryStore];

    `),Xe=n(d,"SPAN",{class:!0});var si=r(Xe);vl=s(si,"NSArray"),si.forEach(a),yl=s(d," *items = ["),Ze=n(d,"SPAN",{class:!0});var ai=r(Ze);Sl=s(ai,"self"),ai.forEach(a),_l=s(d," fetchAllWithEntity:"),Je=n(d,"SPAN",{class:!0});var oi=r(Je);wl=s(oi,'@"Item"'),oi.forEach(a),Nl=s(d,` error:&error];
    `),Qe=n(d,"SPAN",{class:!0});var li=r(Qe);bl=s(li,"for"),li.forEach(a),jl=s(d," ("),Ye=n(d,"SPAN",{class:!0});var ni=r(Ye);Pl=s(ni,"id"),ni.forEach(a),Il=s(d," item "),$e=n(d,"SPAN",{class:!0});var ri=r($e);Al=s(ri,"in"),ri.forEach(a),Cl=s(d,` items) {
        [item setValue:section forKey:`),et=n(d,"SPAN",{class:!0});var ii=r(et);kl=s(ii,'@"section"'),ii.forEach(a),gl=s(d,`];
    }

    `),tt=n(d,"SPAN",{class:!0});var ci=r(tt);Ol=s(ci,"return"),ci.forEach(a),Dl=s(d," "),st=n(d,"SPAN",{class:!0});var di=r(st);Ml=s(di,"self"),di.forEach(a),Tl=s(d,`;
}`),d.forEach(a),gr.forEach(a),kr.forEach(a),Cr.forEach(a),_s=u(o),j=n(o,"P",{});var x=r(j);xl=s(x,"Here the message "),Bt=n(x,"CODE",{});var hi=r(Bt);Rl=s(hi,"assignObject:toPersistentStore:"),hi.forEach(a),Fl=s(x," is sent to the "),zt=n(x,"CODE",{});var pi=r(zt);Ll=s(pi,"NSManagedObjectContext"),pi.forEach(a),ql=s(x," to put the newly created "),Xt=n(x,"EM",{});var fi=r(Xt);Ul=s(fi,"Section"),fi.forEach(a),Vl=s(x," in the in memory store so that it is not saved to disk with the "),Zt=n(x,"EM",{});var ui=r(Zt);Wl=s(ui,"Item"),ui.forEach(a),Kl=s(x,"s."),x.forEach(a),ws=u(o),O=n(o,"P",{});var mt=r(O);Gl=s(mt,"I also added an action to my application delegate to create new "),Jt=n(mt,"EM",{});var mi=r(Jt);Hl=s(mi,"Item"),mi.forEach(a),Bl=s(mt,"s and make them children to the "),Qt=n(mt,"EM",{});var Ei=r(Qt);zl=s(Ei,"Section"),Ei.forEach(a),Xl=s(mt,"."),mt.forEach(a),Ns=u(o),G=n(o,"DIV",{class:!0});var vi=r(G);at=n(vi,"DIV",{class:!0});var yi=r(at);ot=n(yi,"PRE",{class:!0});var Si=r(ot);v=n(Si,"CODE",{});var N=r(v);Zl=s(N,"- ("),lt=n(N,"SPAN",{class:!0});var _i=r(lt);Jl=s(_i,"void"),_i.forEach(a),Ql=s(N,")addItem:("),nt=n(N,"SPAN",{class:!0});var wi=r(nt);Yl=s(wi,"id"),wi.forEach(a),$l=s(N,`)sender
{
    `),rt=n(N,"SPAN",{class:!0});var Ni=r(rt);en=s(Ni,"id"),Ni.forEach(a),tn=s(N," newObject = ["),it=n(N,"SPAN",{class:!0});var bi=r(it);sn=s(bi,"NSEntityDescription"),bi.forEach(a),an=s(N," insertNewObjectForEntityForName:"),ct=n(N,"SPAN",{class:!0});var ji=r(ct);on=s(ji,'@"Item"'),ji.forEach(a),ln=s(N,`
                                                 inManagedObjectContext:[`),dt=n(N,"SPAN",{class:!0});var Pi=r(dt);nn=s(Pi,"self"),Pi.forEach(a),rn=s(N,` managedObjectContext]];
    [newObject setValue:section forKey:`),ht=n(N,"SPAN",{class:!0});var Ii=r(ht);cn=s(Ii,'@"section"'),Ii.forEach(a),dn=s(N,`];
}`),N.forEach(a),Si.forEach(a),yi.forEach(a),vi.forEach(a),bs=u(o),D=n(o,"P",{});var Et=r(D);hn=s(Et,"That’s it! Now a regular "),Yt=n(Et,"CODE",{});var Ai=r(Yt);pn=s(Ai,"NSTreeController"),Ai.forEach(a),fn=s(Et," can be used in entity mode by setting the entity to "),$t=n(Et,"EM",{});var Ci=r($t);un=s(Ci,"Section"),Ci.forEach(a),mn=s(Et," as you would normally do."),Et.forEach(a),js=u(o),M=n(o,"P",{});var vt=r(M);En=s(vt,"I hope you found it useful, if you did, make sure you share it with your friends and subscribe to my "),H=n(vt,"A",{href:!0,rel:!0});var ki=r(H);vn=s(ki,"RSS feed"),ki.forEach(a),yn=s(vt," or "),B=n(vt,"A",{href:!0,rel:!0});var gi=r(B);Sn=s(gi,"follow me on twitter"),gi.forEach(a),_n=s(vt," for notifications about future posts."),vt.forEach(a),Ps=u(o),pt=n(o,"P",{});var Oi=r(pt);wn=s(Oi,"I’d love to get feedback on better solutions, improvements or just comments on what you think."),Oi.forEach(a),this.h()},h(){Di(X.src,bn="/images/posts/sl-cd-result.png")||i(X,"src",bn),i(X,"alt","The planned source list"),i(U,"href","http://twitter.com/rhult"),i(U,"rel","nofollow"),Di(te.src,jn="/images/posts/sl-cd-datamodel1.png")||i(te,"src",jn),i(te,"alt","The data model"),i(oe,"class","hljs-comment"),i(le,"class","hljs-type"),i(ne,"class","hljs-comment"),i(re,"class","hljs-type"),i(ie,"class","hljs-keyword"),i(ce,"class","hljs-literal"),i(ae,"class","highlight"),i(se,"class","highlight"),i(V,"class","highlighter-rouge language-objc"),i(fe,"class","hljs-built_in"),i(ue,"class","hljs-string"),i(me,"class","hljs-keyword"),i(Ee,"class","hljs-built_in"),i(ve,"class","hljs-literal"),i(ye,"class","hljs-literal"),i(Se,"class","hljs-built_in"),i(pe,"class","highlight"),i(he,"class","highlight"),i(W,"class","highlighter-rouge language-objc"),i(be,"class","hljs-built_in"),i(je,"class","hljs-built_in"),i(Pe,"class","hljs-built_in"),i(Ie,"class","hljs-built_in"),i(Ae,"class","hljs-built_in"),i(Ce,"class","hljs-built_in"),i(ke,"class","hljs-keyword"),i(ge,"class","hljs-built_in"),i(Oe,"class","hljs-keyword"),i(De,"class","hljs-keyword"),i(Me,"class","hljs-type"),i(Te,"class","hljs-variable language_"),i(xe,"class","hljs-built_in"),i(Re,"class","hljs-built_in"),i(Fe,"class","hljs-built_in"),i(Le,"class","hljs-string"),i(qe,"class","hljs-type"),i(Ue,"class","hljs-keyword"),i(Ve,"class","hljs-built_in"),i(We,"class","hljs-string"),i(Ke,"class","hljs-keyword"),i(Ge,"class","hljs-keyword"),i(He,"class","hljs-string"),i(Be,"class","hljs-string"),i(ze,"class","hljs-keyword"),i(Xe,"class","hljs-built_in"),i(Ze,"class","hljs-keyword"),i(Je,"class","hljs-string"),i(Qe,"class","hljs-keyword"),i(Ye,"class","hljs-type"),i($e,"class","hljs-keyword"),i(et,"class","hljs-string"),i(tt,"class","hljs-keyword"),i(st,"class","hljs-keyword"),i(Ne,"class","highlight"),i(we,"class","highlight"),i(K,"class","highlighter-rouge language-objc"),i(lt,"class","hljs-type"),i(nt,"class","hljs-type"),i(rt,"class","hljs-type"),i(it,"class","hljs-built_in"),i(ct,"class","hljs-string"),i(dt,"class","hljs-keyword"),i(ht,"class","hljs-string"),i(ot,"class","highlight"),i(at,"class","highlight"),i(G,"class","highlighter-rouge language-objc"),i(H,"href","http://hallski.org/atom.xml"),i(H,"rel","nofollow"),i(B,"href","http://twitter.com/mhallendal"),i(B,"rel","nofollow")},m(o,h){p(o,R,h),e(R,As),p(o,es,h),p(o,z,h),e(z,X),p(o,ts,h),p(o,Z,h),e(Z,Cs),p(o,ss,h),p(o,J,h),e(J,ks),p(o,as,h),p(o,F,h),e(F,gs),e(F,U),e(U,Os),e(F,Ds),p(o,os,h),p(o,Q,h),e(Q,Ms),p(o,ls,h),p(o,Y,h),e(Y,Ts),p(o,ns,h),p(o,$,h),e($,xs),p(o,rs,h),p(o,k,h),e(k,Rs),e(k,yt),e(yt,Fs),e(k,Ls),e(k,St),e(St,qs),e(k,Us),p(o,is,h),p(o,m,h),e(m,_t),e(_t,Vs),e(m,Ws),e(m,wt),e(wt,Ks),e(m,Gs),e(m,Nt),e(Nt,Hs),e(m,Bs),e(m,bt),e(bt,zs),e(m,Xs),e(m,jt),e(jt,Zs),e(m,Js),e(m,Pt),e(Pt,Qs),e(m,Ys),e(m,It),e(It,$s),e(m,ea),e(m,At),e(At,ta),e(m,sa),e(m,Ct),e(Ct,aa),e(m,oa),p(o,cs,h),p(o,ee,h),e(ee,te),p(o,ds,h),p(o,S,h),e(S,la),e(S,kt),e(kt,na),e(S,ra),e(S,gt),e(gt,ia),e(S,ca),e(S,Ot),e(Ot,da),e(S,ha),e(S,Dt),e(Dt,pa),e(S,fa),e(S,Mt),e(Mt,ua),e(S,ma),p(o,hs,h),p(o,b,h),e(b,Ea),e(b,Tt),e(Tt,va),e(b,ya),e(b,xt),e(xt,Sa),e(b,_a),e(b,Rt),e(Rt,wa),e(b,Na),e(b,Ft),e(Ft,ba),e(b,ja),p(o,ps,h),p(o,V,h),e(V,se),e(se,ae),e(ae,_),e(_,oe),e(oe,Pa),e(_,Ia),e(_,le),e(le,Aa),e(_,Ca),e(_,ne),e(ne,ka),e(_,ga),e(_,re),e(re,Oa),e(_,Da),e(_,ie),e(ie,Ma),e(_,Ta),e(_,ce),e(ce,xa),e(_,Ra),p(o,fs,h),p(o,g,h),e(g,Fa),e(g,Lt),e(Lt,La),e(g,qa),e(g,qt),e(qt,Ua),e(g,Va),p(o,us,h),p(o,de,h),e(de,Wa),p(o,ms,h),p(o,I,h),e(I,Ka),e(I,Ut),e(Ut,Ga),e(I,Ha),e(I,Vt),e(Vt,Ba),e(I,za),e(I,Wt),e(Wt,Xa),e(I,Za),p(o,Es,h),p(o,W,h),e(W,he),e(he,pe),e(pe,E),e(E,Ja),e(E,fe),e(fe,Qa),e(E,Ya),e(E,ue),e(ue,$a),e(E,eo),e(E,me),e(me,to),e(E,so),e(E,Ee),e(Ee,ao),e(E,oo),e(E,ve),e(ve,lo),e(E,no),e(E,ye),e(ye,ro),e(E,io),e(E,Se),e(Se,co),e(E,ho),p(o,vs,h),p(o,_e,h),e(_e,po),p(o,ys,h),p(o,A,h),e(A,fo),e(A,Kt),e(Kt,uo),e(A,mo),e(A,Gt),e(Gt,Eo),e(A,vo),e(A,Ht),e(Ht,yo),e(A,So),p(o,Ss,h),p(o,K,h),e(K,we),e(we,Ne),e(Ne,c),e(c,_o),e(c,be),e(be,wo),e(c,No),e(c,je),e(je,bo),e(c,jo),e(c,Pe),e(Pe,Po),e(c,Io),e(c,Ie),e(Ie,Ao),e(c,Co),e(c,Ae),e(Ae,ko),e(c,go),e(c,Ce),e(Ce,Oo),e(c,Do),e(c,ke),e(ke,Mo),e(c,To),e(c,ge),e(ge,xo),e(c,Ro),e(c,Oe),e(Oe,Fo),e(c,Lo),e(c,De),e(De,qo),e(c,Uo),e(c,Me),e(Me,Vo),e(c,Wo),e(c,Te),e(Te,Ko),e(c,Go),e(c,xe),e(xe,Ho),e(c,Bo),e(c,Re),e(Re,zo),e(c,Xo),e(c,Fe),e(Fe,Zo),e(c,Jo),e(c,Le),e(Le,Qo),e(c,Yo),e(c,qe),e(qe,$o),e(c,el),e(c,Ue),e(Ue,tl),e(c,sl),e(c,Ve),e(Ve,al),e(c,ol),e(c,We),e(We,ll),e(c,nl),e(c,Ke),e(Ke,rl),e(c,il),e(c,Ge),e(Ge,cl),e(c,dl),e(c,He),e(He,hl),e(c,pl),e(c,Be),e(Be,fl),e(c,ul),e(c,ze),e(ze,ml),e(c,El),e(c,Xe),e(Xe,vl),e(c,yl),e(c,Ze),e(Ze,Sl),e(c,_l),e(c,Je),e(Je,wl),e(c,Nl),e(c,Qe),e(Qe,bl),e(c,jl),e(c,Ye),e(Ye,Pl),e(c,Il),e(c,$e),e($e,Al),e(c,Cl),e(c,et),e(et,kl),e(c,gl),e(c,tt),e(tt,Ol),e(c,Dl),e(c,st),e(st,Ml),e(c,Tl),p(o,_s,h),p(o,j,h),e(j,xl),e(j,Bt),e(Bt,Rl),e(j,Fl),e(j,zt),e(zt,Ll),e(j,ql),e(j,Xt),e(Xt,Ul),e(j,Vl),e(j,Zt),e(Zt,Wl),e(j,Kl),p(o,ws,h),p(o,O,h),e(O,Gl),e(O,Jt),e(Jt,Hl),e(O,Bl),e(O,Qt),e(Qt,zl),e(O,Xl),p(o,Ns,h),p(o,G,h),e(G,at),e(at,ot),e(ot,v),e(v,Zl),e(v,lt),e(lt,Jl),e(v,Ql),e(v,nt),e(nt,Yl),e(v,$l),e(v,rt),e(rt,en),e(v,tn),e(v,it),e(it,sn),e(v,an),e(v,ct),e(ct,on),e(v,ln),e(v,dt),e(dt,nn),e(v,rn),e(v,ht),e(ht,cn),e(v,dn),p(o,bs,h),p(o,D,h),e(D,hn),e(D,Yt),e(Yt,pn),e(D,fn),e(D,$t),e($t,un),e(D,mn),p(o,js,h),p(o,M,h),e(M,En),e(M,H),e(H,vn),e(M,yn),e(M,B),e(B,Sn),e(M,_n),p(o,Ps,h),p(o,pt,h),e(pt,wn)},p:Nn,i:Nn,o:Nn,d(o){o&&a(R),o&&a(es),o&&a(z),o&&a(ts),o&&a(Z),o&&a(ss),o&&a(J),o&&a(as),o&&a(F),o&&a(os),o&&a(Q),o&&a(ls),o&&a(Y),o&&a(ns),o&&a($),o&&a(rs),o&&a(k),o&&a(is),o&&a(m),o&&a(cs),o&&a(ee),o&&a(ds),o&&a(S),o&&a(hs),o&&a(b),o&&a(ps),o&&a(V),o&&a(fs),o&&a(g),o&&a(us),o&&a(de),o&&a(ms),o&&a(I),o&&a(Es),o&&a(W),o&&a(vs),o&&a(_e),o&&a(ys),o&&a(A),o&&a(Ss),o&&a(K),o&&a(_s),o&&a(j),o&&a(ws),o&&a(O),o&&a(Ns),o&&a(G),o&&a(bs),o&&a(D),o&&a(js),o&&a(M),o&&a(Ps),o&&a(pt)}}}const qi={comments:!1,date:"2009-04-06T00:00:00Z",section:"blog",tags:["objective-c"],title:"Source List with Core Data"};class Ui extends Ti{constructor(R){super(),xi(this,R,null,Fi,Ri,{})}}export{Ui as default,qi as metadata};
